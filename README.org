#+title: Stark Bank Challenge

Project meant to create an =Integration= with the [[https://starkbank.com/docs/api#introduction][Stark Bank API]].

We will be using the [[https://github.com/starkbank/sdk-clojure][Clojure API]].

* Specification
#+begin_quote
Create a =Project= and =Webhook endpoint= for that account and develop a simple app integration using
whichever language you prefer that:

1. Issues 8 to 12 Invoices every 3 hours to random people for 24 hours (our Sandbox emulation environment will make sure some of those are automatically paid);

2. Receives the =webhook callback= of the Invoice credit and sends the received amount (minus eventual fees) to the following account using a Transfer:

    a. bank code: 20018183

    b. branch: 0001

    c. account: 6341320293482496

    d. name: Stark Bank S.A.

    e. tax ID: 20.018.183/0001-80

    f. account type: payment
#+end_quote
* Logic
** Random requests
#+begin_quote
1. Issues 8 to 12 Invoices every 3 hours to random people for 24 hours (our Sandbox emulation environment will make sure some of those are automatically paid);
#+end_quote

Each three hours, we must have something among $10 \pm 2$ invoices.

We will sample a normal distribution of mean 10 and deviation 2. Following, we will generate random moments between the given instant, and three hours from then. Thus, doing that eight times, shifthing three hours each iteration, we cover the hole 24 hours, following the given distribution.

* API end-points
** Base URL:
https://sandbox.api.starkbank.com

* Using generated private-key

Using =clojure.core/slurp=, we can catch the contents of the =privateKey.pem= file. For example, we could print it, to make sure we are catching meaning content.

#+begin_src clojure :eval no
(clojure.pprint/pprint (slurp "resources/keys/privateKey.pem"))
(println (slurp "resources/keys/privateKey.pem"))

(with-open [rdr (clojure.java.io/reader "resources/keys/privateKey.pem")]
  (reduce conj [] (line-seq rdr)))
#+end_src

* Setting up the project

In =stark-challenge.core.clj=, we start the project, by setting up the user to =buddhilw=. The given parameters to the environment, e.i., =id=, =private-key=, etc have all been set at =stark-challenge.project=.

#+begin_src clojure :eval no
(sset/user proj-setup/buddhilw)
;; => {:environment "sandbox",
;;     :id <id>,
;;     :private-key <private-key>,
;;     :type "project"})
;;
#+end_src
* Invoice generation
Example of a Invoice,
#+begin_src clojure :eval no
(def invoices (invoice/create
                 [{:tags ["immediate"]
                   :amount 400000
                   :due "2022-09-02T18:50:00.000000+00:00"
                   :tax-id "012.345.678-90"
                   :name "Iron Bank S.A."
                   :expiration 123456789
                   :fine 2.5
                   :interest 1.3
                   :descriptions [{:key "Product X"
                                   :value "big"}]}]))
#+end_src

The time must be formatted as used in =clj-time= library,
#+begin_src clojure :eval no
(require '[clj-time.local :as l])
(l/local-now)
#+end_src

This value can be used to generate a =invoice=.

* Webhooks
** Resources
|----------------+---------------------------|
| Title          | Link                      |
|----------------+---------------------------|
| Using Web Hook | https://vimeo.com/4537957 |
|----------------+---------------------------|

#+begin_quote
Pattern of anabling user-defined callbacks in web applications
#+end_quote

** Webhook with =ngrok=
*** Requirements
Required:
- Have a registered account in =ngrok=;
- Have configured ngrok cli;
  - Follow the ngrok dashboard =/get-started/setup= page.

*** Start port to localhost
#+begin_src shell
ngrok http 80
#+end_src

#+RESULTS:
: (...)
: Forwarding                    https://cdbc-2804-431-e7c6-ebff-5e62-a7ec-6c56-f3dc.sa.ngrok.io -> http://localhost:80

Finally, copy the ngrok address.

*** DONE Hook =Invoice=
CLOSED: [2022-09-02 sex 19:20]

#+begin_src clojure :eval no
(def webhook
  (swh/create
   {:url "https://b79b-2804-431-e7c6-ebff-5e62-a7ec-6c56-f3dc.sa.ngrok.io" ;; from ngrok
    :subscriptions ["transfer" "invoice"]}))
(println webhook)

(def webhooks (swh/query))
(println (map :url webhooks))

(:url webhook)
(slurp "https://b79b-2804-431-e7c6-ebff-5e62-a7ec-6c56-f3dc.sa.ngrok.io")

;; From sandbox: https://challenge447890.sandbox.starkbank.com/integration
(swh/get "4834065156931584")
#+end_src
