#+title: Stark Bank Challenge

Project meant to create an =Integration= with the [[https://starkbank.com/docs/api#introduction][Stark Bank API]].

We will be using the [[https://github.com/starkbank/sdk-clojure][Clojure API]].

* Table of Contents :toc:
- [[#specification][Specification]]
- [[#logic][Logic]]
  - [[#random-requests][Random requests]]
- [[#api-end-points][API end-points]]
  - [[#base-url][Base URL:]]
- [[#using-generated-private-key][Using generated private-key]]
- [[#setting-up-the-project][Setting up the project]]
- [[#invoice-generation][Invoice generation]]
  - [[#example-of-an-invoice][Example of an Invoice]]
  - [[#amount-generation][Amount generation]]
  - [[#time-generation][Time generation]]
  - [[#tax-id-generation][Tax id generation]]
  - [[#names-generation][Names generation]]
  - [[#expiration-generation][Expiration generation]]
  - [[#fine-generation][Fine generation]]
  - [[#interest-generation][Interest generation]]
  - [[#description-generation][Description generation]]
  - [[#invoice-generation-1][Invoice generation]]
- [[#webhooks][Webhooks]]
  - [[#resources][Resources]]
  - [[#webhook-with-ngrok][Webhook with =ngrok=]]
  - [[#webhook-with-request-bin][Webhook with =request-bin=]]

* Specification
#+begin_quote
Create a =Project= and =Webhook endpoint= for that account and develop a simple app integration using
whichever language you prefer that:

1. Issues 8 to 12 Invoices every 3 hours to random people for 24 hours (our Sandbox emulation environment will make sure some of those are automatically paid);

2. Receives the =webhook callback= of the Invoice credit and sends the received amount (minus eventual fees) to the following account using a Transfer:

    a. bank code: 20018183

    b. branch: 0001

    c. account: 6341320293482496

    d. name: Stark Bank S.A.

    e. tax ID: 20.018.183/0001-80

    f. account type: payment
#+end_quote
* Logic
** Random requests
#+begin_quote
1. Issues 8 to 12 Invoices every 3 hours to random people for 24 hours (our Sandbox emulation environment will make sure some of those are automatically paid);
#+end_quote

Each three hours, we must have something among $10 \pm 2$ invoices.

We will sample a normal distribution of mean 10 and deviation 2. Following, we will generate random moments between the given instant, and three hours from then. Thus, doing that eight times, shifthing three hours each iteration, we cover the hole 24 hours, following the given distribution.

* API end-points
** Base URL:
https://sandbox.api.starkbank.com

* Using generated private-key

Using =clojure.core/slurp=, we can catch the contents of the =privateKey.pem= file. For example, we could print it, to make sure we are catching meaning content.

#+begin_src clojure :eval no
(clojure.pprint/pprint (slurp "resources/keys/privateKey.pem"))
(println (slurp "resources/keys/privateKey.pem"))

(with-open [rdr (clojure.java.io/reader "resources/keys/privateKey.pem")]
  (reduce conj [] (line-seq rdr)))
#+end_src

* Setting up the project

In =stark-challenge.core.clj=, we start the project, by setting up the user to =buddhilw=. The given parameters to the environment, e.i., =id=, =private-key=, etc have all been set at =stark-challenge.project=.

#+begin_src clojure :eval no
(sset/user proj-setup/buddhilw)
;; => {:environment "sandbox",
;;     :id <id>,
;;     :private-key <private-key>,
;;     :type "project"})
;;
#+end_src
* Invoice generation
** Example of an Invoice
#+begin_src clojure :eval no
(def invoices (invoice/create
                 [{:tags ["immediate"]
                   :amount 400000
                   :due "2022-09-02T18:50:00.000000+00:00"
                   :tax-id "012.345.678-90"
                   :name "Iron Bank S.A."
                   :expiration 123456789
                   :fine 2.5
                   :interest 1.3
                   :descriptions [{:key "Product X"
                                   :value "big"}]}]))
#+end_src

** Amount generation
Generates a random amount, and returns a =long= type, because it complies to the =:amount= key type.
#+begin_src clojure :eval no
(defn r-amount
  "Generate a random amount between 2R$ and a max value (a value of 100 translates to 1R$)"
  [max]
  (long (r-min-max 200 max)))
#+end_src

** Time generation
*** Formatter
The time must be formatted as used in =clojure.java-time=
#+begin_src clojure :eval no
(require '[clojure.java-time :as jt])

(defn due-timestamp
  "Format timestamp for given time, complient to =:due= requested-format, on invoice/create."
  [time]
  (-> (drop-last 4 (str time))
      (clojure.string/join)
      (str "+00:00")))

(due-timestamp (jt/instant))
         ;; => "2022-09-05T14:34:32.884993+00:00"
#+end_src

The value returned from =due-timestamp= can be used to generate an =invoice=, passed to the =:due= key.
*** Three hours span - generating timestamps
This function generates 8 to 12 timestamps, which randomly are distributed through the span of three hours.

The initial time considered is the current instant off-set by five minutes into the future.
#+begin_src clojure :eval no
;; ------- HELPER funtions -------
(defn concatv
  "Helper function: concatenate `xs` and return the result as a vector."
  [& xs]
  (into [] cat xs))

(defn future-timestamp
  "Generate timestamp for future due-date"
  [start jt-future-minutes]
  (jt/plus start jt-future-minutes))

;; ------ MAIN function ------------
(defn gen-three-hours
  "Generate due-dates for 3 hours of invoices-creation, starting at five minutes from when the function is called."
  []
  (loop [init-ts  (future-timestamp (jt/instant) (jt/minutes 5))
         quantity (r-min-max 8 12)
         trange   180
         vals     []]
    (if (> (count vals) 8) ;; => the minimum is 64 invoices in 24 hours (8 per 3 hours)
      vals
      (recur (future-timestamp init-ts (jt/minutes trange))
             (r-min-max 8 12)
             (identity trange)
             (concatv vals (gen-timestamps init-ts quantity trange))))))
#+end_src
** Tax id generation
=cadatro-de-pessoa= library provides way of generating fictitious, but valid, =cnpj= and =cpf= values.

#+begin_src clojure :eval no
(require '[cadastro-de-pessoa.cnpj :as cnpj])
(cnpj/gen)
    ;; => "55.986.932/0406-02"
#+end_src

Finally, this can be passed to =:tax-id= key.

** Names generation
Using =namejen.names= library, we can generate random fake names, which look plausible real.
#+begin_src clojure :eval no
(require '[namejen.names :as names])
(names/name-maker)
    ;; => "Eita Ackye"
#+end_src

This is passed to the =:name= key.
** Expiration generation
We just pass a random integer, in the range of 1000.
#+begin_src clojure :eval no
(defn r-exp []
  (rand-int 1000))
#+end_src

This is passed to the =:expiration= key.

** Fine generation
We take values that will be around 0.00 and 10.00, randomly.
#+begin_src clojure :eval no
(defn r-fine []
  (float (/ (rand-int 1000) 100)))
#+end_src

This value is passed to =:fine= key.
** Interest generation
We take values that will be around 0.00 and 5.00, randomly.
#+begin_src clojure :eval no
(defn r-interest []
  (float (/ (rand-int 500) 100)))
#+end_src

This value is passed to =:interest= key.
** Description generation
The =descriptions= key is a data-structure a little more complicate. We used the following home-coocked algorithm to generate it.

#+begin_src clojure :eval no
(def alphabet ["A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z"])
(def descriptions ["Product" "Service" "Payment"])

(defn r-two-digits
  "Generate two digits, randomly"
  []
  (let [max (math/expt 10 2)
        r (rand max)]
    (if (< r (/ max 10))
      (r-two-digits)
      (math/round r))))

(defn r-descr-key
  []
  (str  (rand-nth descriptions)
        " "
        (rand-nth alphabet)
        (r-two-digits)))

(defn r-descr-val
  [value]
  (if (> value 100000)
    "big"
    "small"))

(defn r-descr-map
  [value]
  {:key (r-descr-key)
   :value (r-descr-val value)})

(comment (r-descr-map 10000)
         ;; => {:key "Product P99", :value "small"}
         ;; => {:key "Product J13", :value "small"}
         ;; => {:key "Product I72", :value "small"}
         (r-descr-map 1000000))
         ;; => {:key "Service S38", :value "big"}
         ;; => {:key "Payment U98", :value "big"}
         ;; => {:key "Payment O20", :value "big"}
#+end_src
** Invoice generation

This function relies on all previous helpers and the names-generator library, as well as cnpj-generator.

The logic depends on looping through the timestamps (=ts=). For each timestamp we generate an =Invoice= map. Finally, =conj= this map into the results-vector (=vals=).

When the timestamps list is emptied-out, we return all the map-values in the resulting vector.

#+begin_src clojure :eval no
(require '[stark-challenge.gen-invoice.helpers :as help])
(require '[namejen.names :as names])
(require '[cadastro-de-pessoa.cnpj :as cnpj])

(defn gen-three-hours-invoices
  "First the timestamps are generated and saved into =ts= (timestamps).
   Then, we test if this list is empty. If it's not, we generate an invoice
   with the first timestamp. If it's empty, we return the list of generated
   invoices (maps).

  Generate invoices in a range of three-hours."
  []
  (let [ts (map help/due-timestamp (help/gen-three-hours))]
    (loop [t (first ts)
           ts (rest ts)
           amount (help/r-amount 1000000)
           cnpj (cnpj/gen)
           name (names/name-maker)
           exp  (help/r-exp)
           fine (help/r-fine)
           inter (help/r-interest)
           descr [(help/r-descr-map amount)]
           vals []]
      (if (empty? t)
        vals
        (recur (first ts)
               (rest ts)
               (help/r-amount 1000000)
               (cnpj/gen)
               (names/name-maker)
               (help/r-exp)
               (help/r-fine)
               (help/r-interest)
               [(help/r-descr-map amount)]
               (conj vals (help/gen-invoice-map amount t cnpj name exp fine inter descr)))))))
#+end_src

*** Example
#+begin_src clojure :eval no
(gen-three-hours-invoices)
#+end_src

#+RESULTS:
#+begin_example
[{:amount 994400,
  :tags ["scheduled"],
  :name "Aimie Oseph",
  :expiration 383,
  :tax-id "72.034.556/2003-89",
  :due "2022-09-05T16:07:48.809261+00:00",
  :interest 0.03999999910593033,
  :fine 6.239999771118164,
  :descriptions [{:key "Service D20", :value "big"}]}

  (...)

 {:amount 732935,
  :tags ["scheduled"],
  :name "Ms. Rlee Mothy Rolsky Arissa Rdad",
  :expiration 571,
  :tax-id "12.737.391/9287-07",
  :due "2022-09-05T17:06:48.809261+00:00",
  :interest 3.380000114440918,
  :fine 9.890000343322754,
  :descriptions [{:key "Product M69", :value "big"}]}]
#+end_example

* Webhooks
** Resources
|----------------+---------------------------|
| Title          | Link                      |
|----------------+---------------------------|
| Using Web Hook | https://vimeo.com/4537957 |
|----------------+---------------------------|

#+begin_quote
Pattern of enabling user-defined callbacks in web applications
#+end_quote

** Webhook with =ngrok=
*** Requirements
Required:
- Have a registered account in =ngrok=;
- Have configured ngrok cli;
  - Follow the ngrok dashboard =/get-started/setup= page.

*** Start port to localhost
#+begin_src shell
ngrok http 80
#+end_src

#+RESULTS:
: (...)
: Forwarding                    https://cdbc-2804-431-e7c6-ebff-5e62-a7ec-6c56-f3dc.sa.ngrok.io -> http://localhost:80

Finally, copy the ngrok address.

*** DONE Hook =Invoice=
CLOSED: [2022-09-02 sex 19:20]

#+begin_src clojure :eval no
(def webhook
  (swh/create
   {:url "https://b79b-2804-431-e7c6-ebff-5e62-a7ec-6c56-f3dc.sa.ngrok.io" ;; from ngrok
    :subscriptions ["transfer" "invoice"]}))
(println webhook)

(def webhooks (swh/query))
(println (map :url webhooks))

(:url webhook)
(slurp "https://b79b-2804-431-e7c6-ebff-5e62-a7ec-6c56-f3dc.sa.ngrok.io")

;; From sandbox: https://challenge447890.sandbox.starkbank.com/integration
(swh/get "4834065156931584")
#+end_src
** Webhook with =request-bin=

With the right permitions, we create a webhook to a generated url, given by [[https://pipedream.com/][RequestBin - A product by PipeDream]].

#+begin_src clojure :eval no
(ns stark-challenge.webhook.start
  (:require [starkbank.webhook :as swh]))

(def webhook
  (swh/create
   {:url "<RequestBin-URL>"
    :subscriptions ["invoice"]}))
#+end_src

After generating invoices, we can see and inspect the data-structure and parse it in our server-setup. So, now we know we will be getting =POST= requests.

#+ATTR_HTML: :width 1000px
[[file:resources/img/request-bin.png][file:resources/img/request-bin.png]]

And, these post-requests have the following structure:
#+begin_example
{"amount":64111,
"brcode":"00020101021226890014br.gov.bcb.pix2567brcode-h.sandbox.starkinfra.com/v2/34c77f29b1064d529f80ed87c2f7f9ae5204000053039865802BR5925Stark Bank S.A. - Institu6009Sao Paulo62070503***630435DB",
"created":"2022-09-04T22:43:07.990881+00:00",
"descriptions":[{"key":"Product Z","value":"small"}],
"discountAmount":0,
"discounts":[],
"due":"2022-09-04T22:48:07.464286+00:00",
"expiration":724,
"fee":0,
"fine":6.559999942779541,
"fineAmount":0,
"id":"5487098693943296",
"interest":2.759999990463257,
"interestAmount":0,
"link":"https://challenge447890.sandbox.starkbank.com/invoicelink/34c77f29b1064d529f80ed87c2f7f9ae",
"name":"Cyrus",
"nominalAmount":64111,
"pdf":"https://sandbox.api.starkbank.com/v2/invoice/34c77f29b1064d529f80ed87c2f7f9ae.pdf",
"status":"expired",
"tags":["scheduled"],
"taxId":"90.647.785/7623-59",
"transactionIds":[],
"updated":"2022-09-04T23:00:11.760299+00:00"}
#+end_example
